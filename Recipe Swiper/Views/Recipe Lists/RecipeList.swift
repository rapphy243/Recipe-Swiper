//
//  RecipelistItem.swift
//  Recipe Swiper
//
//  Created by Raphael Abano on 5/4/25.
//
//  Partily generated by Claude 2.5
//  https://www.youtube.com/watch?v=mqLDroFreFE

import SwiftData
import SwiftUI

struct RecipeListView: View {
    @Environment(\.modelContext) private var modelContext
    var isDiscardedView: Bool
    @Query(sort: [SortDescriptor(\RecipeModel.dateModified, order: .forward)])
    var recipeList: [RecipeModel]

    var body: some View {
        NavigationStack {
            List {
                ForEach(recipeList, id: \.self) { recipe in
                    NavigationLink(destination: FullRecipe(recipe: recipe)) {
                        RecipelistItem(
                            recipe: recipe,
                            showRating: !isDiscardedView
                        )
                    }
                    .swipeActions(edge: .trailing, allowsFullSwipe: true) {
                        if isDiscardedView {
                            Button(role: .destructive) {
                                modelContext.delete(recipe)
                            } label: {
                                Label("Delete", systemImage: "trash")
                            }
                            .tint(.red)
                        } else {
                            Button(role: .destructive) {
                                recipe.isDiscarded = true
                            } label: {
                                Label("Discard", systemImage: "trash")
                            }
                            .tint(.red)
                        }
                    }
                    .swipeActions(edge: .leading, allowsFullSwipe: true) {
                        if isDiscardedView {
                            Button {
                                recipe.isDiscarded = false
                            } label: {
                                Label("Save", systemImage: "plus")
                            }
                            .tint(.green)
                        } else {
                            Button {
                                recipe.rating = 0.0
                            } label: {
                                Label("Clear Rating", systemImage: "star.slash")
                            }
                            .tint(.orange)
                        }
                    }
                }
            }
        }
    }

    init(
        sort: SortDescriptor<RecipeModel>,
        filter: String,
        isDiscardedView: Bool
    ) {
        self.isDiscardedView = isDiscardedView
        if isDiscardedView {
            _recipeList = Query(
                filter: #Predicate<RecipeModel> { $0.isDiscarded },
                sort: [sort]
            )
        } else {
            _recipeList = Query(
                filter: returnFilterPredicate(filter),
                sort: [sort]
            )
        }
    }

    // This should only be used for SavedRecipesView. Returns a #Predicate to filter recipes
    private func returnFilterPredicate(_ filter: String) -> Predicate<
        RecipeModel
    > {
        if filter == "All" {
            return #Predicate<RecipeModel> { recipe in
                !recipe.isDiscarded
            }
        } else if filter == "Rating" {
            return #Predicate<RecipeModel> { recipe in
                !recipe.isDiscarded && recipe.rating != 0.0
            }
        }

        return #Predicate<RecipeModel> { recipe in
            !recipe.isDiscarded
        }
    }
}

struct RecipelistItem: View {
    @State var recipe: RecipeModel
    var showRating: Bool = true
    var body: some View {
        HStack {
            if let imageData = recipe.imageData {
                if let image = UIImage(data: imageData) {
                    Image(uiImage: image)
                        .resizable()
                        .scaledToFill()
                        .frame(width: 60, height: 60)
                        .clipped()
                        .cornerRadius(10)
                }
            } else {
                RoundedRectangle(cornerRadius: 10)
                    .fill(Color.gray.opacity(0.3))
                    .frame(width: 60, height: 60)
                    .onAppear {
                        Task {
                            await recipe.getImage()
                        }
                    }
            }
            VStack(alignment: .leading) {
                Text(recipe.title)
                    .font(.headline)
                if showRating {
                    if recipe.rating > 0 {
                        HStack {
                            ForEach(1...5, id: \.self) { star in
                                Image(
                                    systemName: star
                                        <= Int((recipe.rating) / 2)  // Round down due to no half stars
                                        ? "star.fill" : "star"
                                )
                                .foregroundColor(.yellow)
                                .font(.caption)
                            }
                        }
                    }
                }
            }
            Spacer()
        }
    }
}

#Preview {
    let config = ModelConfiguration(isStoredInMemoryOnly: true)
    let container = try! ModelContainer(
        for: RecipeModel.self,
        configurations: config
    )
    let recipe1 = RecipeModel(from: loadCakeRecipe(), isDiscarded: false)
    let recipe2 = RecipeModel(from: loadCurryRecipe(), isDiscarded: false)
    let recipe3 = RecipeModel(from: loadSaladRecipe(), isDiscarded: false)
    container.mainContext.insert(recipe1)
    container.mainContext.insert(recipe2)
    container.mainContext.insert(recipe3)

    return RecipeListView(
        sort: SortDescriptor(\RecipeModel.dateModified),
        filter: "All",
        isDiscardedView: false
    )
    .modelContainer(container)
}
